// This file is auto-generated by @hey-api/openapi-ts

import DevConsole from '@/utils/DevConsole';
import {
  type Config,
  type ClientOptions as DefaultClientOptions,
  createClient,
  createConfig,
} from '@hey-api/client-axios';
import type { ClientOptions } from './types.gen';

/**
 * The `createClientConfig()` function will be called on client initialization
 * and the returned object will become the client's initial configuration.
 *
 * You may want to initialize your client this way instead of calling
 * `setConfig()`. This is useful for example if you're using Next.js
 * to ensure your client always has the correct values.
 */
export type CreateClientConfig<T extends DefaultClientOptions = ClientOptions> = (
  override?: Config<DefaultClientOptions & T>
) => Config<Required<DefaultClientOptions> & T>;

export const client = createClient(
  createConfig<ClientOptions>({
    baseURL: process.env.EXPO_API_URL,
    withCredentials: true,
  })
);

export const setupInterceptors = (getAuthToken: () => string | null) => {
  // Request interceptor
  client.instance.interceptors.request.use(
    config => {
      const token = getAuthToken();

      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }

      return config;
    },
    error => {
      DevConsole.error('Request error:', error);
      return Promise.reject(error);
    }
  );

  // Response interceptor
  client.instance.interceptors.response.use(
    response => {
      return response;
    },
    async error => {
      const originalRequest = error.config;

      if (error.response?.status === 401 && !originalRequest._retry) {
        originalRequest._retry = true;

        try {
          return Promise.reject(error);
        } catch (refreshError) {
          return Promise.reject(refreshError);
        }
      }

      return Promise.reject(error);
    }
  );

  return client;
};

// Export the client with interceptors
export default client;
